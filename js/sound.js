
import { calcularFrecuenciaNota, cromaSos, cromaBem } from './config.js'; function ajustarRango(frecuencia, minimo = 80, maximo = 2000) { while (frecuencia < minimo) frecuencia *= 2; while (frecuencia > maximo) frecuencia /= 2; return frecuencia; } const formasPorDefecto = ['square', 'sawtooth', 'sine', 'triangle']; function obtenerOctavaBase(tonica) { const usarSostenidos = !["reâ™­", "miâ™­", "solâ™­", "laâ™­", "siâ™­"].includes(tonica); let cromatica = usarSostenidos ? cromaSos : cromaBem; let index = cromatica.indexOf(tonica); if (index === -1) { const otraCromatica = usarSostenidos ? cromaBem : cromaSos; index = otraCromatica.indexOf(tonica); if (index !== -1) { cromatica = otraCromatica; } else { return 4; } } return index >= cromatica.indexOf("mi") ? 3 : 4; } export function reproducirArpegioMixto(notas, formas = formasPorDefecto) { const contexto = new (window.AudioContext || window.webkitAudioContext)(); const duracionArpegio = 1.5; const duracionAcorde = 3.5; const intervalo = 0.6; const tonica = notas[0]; const octavaBase = obtenerOctavaBase(tonica); let frecuenciaBase = null; notas.forEach((nota, i) => { let octava = octavaBase; if (frecuenciaBase !== null) { while (calcularFrecuenciaNota(nota, octava) < frecuenciaBase && octava < 7) { octava++; } } const frecuencia = calcularFrecuenciaNota(nota, octava); if (!frecuencia) return; frecuenciaBase = frecuencia; const tiempo = contexto.currentTime + i * intervalo; reproducirNotaCompleja(contexto, frecuencia, tiempo, duracionArpegio, formas); }); const tiempoFinal = contexto.currentTime + notas.length * intervalo + 0.3; let frecuenciaAnterior = null; notas.forEach(nota => { let octava = octavaBase; if (frecuenciaAnterior !== null) { while ( calcularFrecuenciaNota(nota, octava) <= frecuenciaAnterior && octava < 7 ) { octava++; } } const frecuencia = calcularFrecuenciaNota(nota, octava); if (!frecuencia) return; frecuenciaAnterior = frecuencia; const ajustada = ajustarRango(frecuencia); reproducirNotaCompleja(contexto, ajustada, tiempoFinal, duracionAcorde, formas); console.log(` ðŸŽ¶ ${nota}${octava} â†’ ${ajustada.toFixed(2)} Hz`); }); } function reproducirNotaCompleja(contexto, frecuencia, tiempo, duracion, formas) { const mezcla = contexto.createGain(); formas.forEach(forma => { const osc = contexto.createOscillator(); const gain = contexto.createGain(); osc.type = forma; osc.frequency.value = frecuencia; gain.gain.setValueAtTime(0.2 / formas.length, tiempo); osc.connect(gain); gain.connect(mezcla); osc.start(tiempo); osc.stop(tiempo + duracion); }); const filtro = contexto.createBiquadFilter(); filtro.type = 'lowpass'; filtro.frequency.value = 1000; const salida = contexto.createGain(); salida.gain.setValueAtTime(0.001, tiempo); salida.gain.linearRampToValueAtTime(0.6, tiempo + 0.1); salida.gain.exponentialRampToValueAtTime(0.001, tiempo + duracion); mezcla.connect(filtro); filtro.connect(salida); salida.connect(contexto.destination); }